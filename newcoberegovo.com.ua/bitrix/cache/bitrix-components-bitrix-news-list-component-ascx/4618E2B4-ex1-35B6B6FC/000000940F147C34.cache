<?xml version="1.0" encoding="utf-8"?>
<SerializationResult xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Name>bitrix_components_bitrix_news_list_component_ascx.4618E2B4-ex1-35B6B6FC</Name>
  <Meta>
    <TypeTable>
      <TypeMapEntry Guid="0" TypeIndex="0" AssemblyIndex="0" AssemblyFullName="mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">System.Collections.Generic.List`1[[System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]</TypeMapEntry>
      <TypeMapEntry Guid="1" TypeIndex="0" AssemblyIndex="14" AssemblyFullName="Main, Version=8.0.0.0, Culture=neutral, PublicKeyToken=null">Bitrix.Components.BXComponentResults</TypeMapEntry>
      <TypeMapEntry Guid="2" TypeIndex="0" AssemblyIndex="14" AssemblyFullName="Main, Version=8.0.0.0, Culture=neutral, PublicKeyToken=null">Bitrix.DataLayer.BXDirectPagingHelper</TypeMapEntry>
    </TypeTable>
  </Meta>
  <Data>
    <string></string>
  </Data>
  <Restriction Name="bitrix_components_bitrix_news_list_component_ascx.4618E2B4-ex1-35B6B6FC" AbsoluteExpiration="02/10/2017 19:34:16" SlidingExpiration="00:00:00" Priority="Normal" />
</SerializationResult>