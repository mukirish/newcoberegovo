@using Bitrix.Blog
@using Bitrix.DataTypes
@using Bitrix.DataLayer
@using Bitrix.Services.Text
@using Bitrix.Security
@using Bitrix.Search
@using Bitrix.Search.Components
@using Bitrix.Mvc
@using Bitrix.CommunitySite.Mvc
@model Bitrix.Main.Components.SystemIncludeAreaComponent2
@{
    this.Layout = "";
}

@Html.RenderComponent("search_form")

@{
    BXComponent2Adapter blogAdapter = null;
    var resolverAdapter = this.ViewData["blog_resolver"] as BXComponent2Adapter<BlogIndexComponent>;
    if (resolverAdapter.ChildContainer != null)
    {
        blogAdapter = resolverAdapter.ChildContainer.Components.SingleOrDefault(r => r.Id.Equals("blog"));
    }

    if (blogAdapter != null)
    {
        blogComponent = blogAdapter.GetComponent() as Bitrix.Blog.Components.BlogComponent2;
    }
}

@functions{

    private string blogSlug;
    private BXBlog blog;
    private BXBlogAuthorization auth;
    private Bitrix.Blog.Components.BlogComponent2 blogComponent = null;
    public readonly bool IsSearch = Bitrix.Modules.BXModuleManager.IsModuleInstalled("Search");
    protected BXParamsBag<object> replace;

    private bool Visible { get; set; }

    public string NewPostUrlTemplate
    {
        get
        {
            return blogComponent.NewPostUrlTemplate.Replace("#BlogSlug#", this.blogSlug);
        }
    }

    public string MetaWebLogUrlTemplate
    {
        get { return GetParameter("BlogMetaWeblogApiUrlTemplate", ""); }
    }

    public string DraftPostListUrlTemplate
    {
        get
        {
            return blogComponent.DraftPostListUrlTemplate.Replace("#BlogSlug#", this.blogSlug);
        }
    }

    public string BlogEditUrlTemplate
    {
        get
        {
            return blogComponent.BlogEditUrlTemplate.Replace("#BlogSlug#", this.blogSlug);
        }
    }

    public string IndexUrlTemplate
    {
        get
        {
            return blogComponent.IndexUrlTemplate + blogSlug + "/";
        }
    }

    public string UserProfileUrlTemplate
    {
        get
        {
            return blogComponent.UserProfileUrlTemplate;
        }
    }
    public string RssBlogPostsUrlTemplate
    {
        get
        {
            return blogComponent.RssBlogPostsUrlTemplate;
        }
    }

    public string GetParameter(string name, string defaultValue)
    {
        string value = defaultValue;
        if (Context.Items.Contains("CommunitySite.Sidebar." + name))
            value = Context.Items["CommunitySite.Sidebar." + name].ToString();

        return Model.Encode(Model.ResolveTemplateUrl(value, replace));
    }


    public string BlogSlug
    {
        get
        {
            if (Context.Items.Contains("CommunitySite.Sidebar.BlogSlug"))
                blogSlug = Context.Items["CommunitySite.Sidebar.BlogSlug"].ToString();
            return blogSlug;
        }
        set { blogSlug = value; }
    }

    public BXBlog Blog
    {
        get { return blog; }
        set { blog = value; }
    }
    public BXBlogAuthorization Auth
    {
        get { return auth; }
    }
}

@{
    if (blog == null && !string.IsNullOrEmpty(BlogSlug))
    {
        blog = BXBlog.GetBySlug(
            BlogSlug,
            null,
            new BXSelectAdd(
                BXBlog.Fields.Owner.User,
                BXBlog.Fields.Owner.User.Image
            ),
            BXTextEncoder.HtmlTextEncoder
        );
    }
    if (blog == null || !blog.Active && !BXPrincipal.Current.IsCanOperate(BXBlog.Operations.BlogApprove))
    {
        blog = null;
        Visible = false;
    }
    else
    {
        replace = new BXParamsBag<object>();
        replace.Add("UserId", Blog.OwnerId);
        replace.Add("BlogSlug", Blog.Slug);
        replace.Add("BlogId", Blog.Id);

        auth = new BXBlogAuthorization(blog);

        BXSearchQuery q = new BXSearchQuery();
        BXSearchContentGroupFilter f = new BXSearchContentGroupFilter(Bitrix.DataLayer.BXFilterExpressionCombiningLogic.And);
        f.Add(BXSearchContentFilter.IsActive(DateTime.Now));
        f.Add(new BXSearchContentFilterItem(BXSearchField.ModuleId, Bitrix.DataLayer.BXSqlFilterOperators.Equal, "blog"));
        f.Add(new BXSearchContentFilterItem(BXSearchField.ItemGroup, Bitrix.DataLayer.BXSqlFilterOperators.Equal, blog.Id));
        q.Filter = f;
        SearchTagsCloudComponent2 cloud = new SearchTagsCloudComponent2();
        cloud.ContentQuery = q;

        Visible = IsSearch || !string.IsNullOrEmpty(RssBlogPostsUrlTemplate) || Blog.Owner != null && Blog.Owner.User != null && Blog.Owner.User.Image != null || Auth.CanEditThisBlogSettings || Auth.CanCreatePost || Auth.CanReadThisBlogDrafts;


        if (!string.IsNullOrEmpty(RssBlogPostsUrlTemplate))
        {
            BXPage.RegisterLink("alternate", "application/rss+xml", RssBlogPostsUrlTemplate, new KeyValuePair<string, string>("title", Blog.TextEncoder.Decode(Blog.Name)));
        }
    }
}

@if (blog != null)
{
    <div class="rounded-block">
        <div class="corner left-top"></div><div class="corner right-top"></div>
        <div class="block-content">
            @if (!String.IsNullOrEmpty(Blog.Name))
            {
                <h3>@Blog.Name<a href="@RssBlogPostsUrlTemplate" class="header-feed-icon" title="Подписаться на RSS блога"></a></h3>
            }
		
            @{
                string src, name, profile, occupation;
                src = name = profile = occupation = null;

                if (Blog.Owner != null && Blog.Owner.User != null)
                {
                    BXUser user = Blog.Owner.User;
                    if (user.Image != null)
                    {
                        src = user.Image.FilePath;
                    }

                    name = user.GetDisplayName();
                    profile = UserProfileUrlTemplate;
                    occupation = user.CustomPublicValues.GetHtml("OCCUPATION");
                }
            }	
            @if (!String.IsNullOrEmpty(name))
            {
                <div class="content-list user-sidebar">
                    <div class="content-item">
                        <div class="content-avatar">
                            <a @(!String.IsNullOrEmpty(src) ? " style=" + "background:url('" + HttpUtility.HtmlAttributeEncode(src) + "') no-repeat center center;" : "") href="@profile"></a>
                        </div>
                        <div class="content-info">
                            <div class="content-title"><a href="@profile">@name</a></div>
                            @if (!String.IsNullOrEmpty(occupation))
                            {
                                <div class="content-signature">@occupation</div>
                            }
                        </div>
                    </div>
                </div>
            }
		
            @if (!String.IsNullOrEmpty(Blog.Description))
            {
                <h5>@Blog.Description</h5>
            }

            <div class="hr"></div>
		
            <ul class="mdash-list">
                <li><a href="@IndexUrlTemplate" title="Блог пользователя">Блог</a></li>
                @if (Auth.CanCreatePost)
                {
                    <li><a href="@NewPostUrlTemplate" title="Написать новую запись в блог">Написать в блог</a></li>
                }
			
                @if (Auth.CanReadThisBlogDrafts)
                {
                    <li><a href="@DraftPostListUrlTemplate" title="Список неопубликованных записей">Черновики</a></li>
                }
			
                @if (Auth.CanEditThisBlogSettings)
                {
                    <li><a href="@BlogEditUrlTemplate" title="Настройки блога">Настройки блога</a></li>
                }
            </ul>
		
        </div>
        <div class="corner left-bottom"></div><div class="corner right-bottom"></div>
    </div>
}
@if (Visible)
{
    @Html.RenderComponent("tag_cloud")
}

@Html.RenderComponent("popular_posts")

@Html.RenderComponent("new_blogs")
