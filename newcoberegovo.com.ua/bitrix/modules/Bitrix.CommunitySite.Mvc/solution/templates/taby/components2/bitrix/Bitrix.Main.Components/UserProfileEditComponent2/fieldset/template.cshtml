@model Bitrix.Main.Components.UserProfileEditComponent2

@if(Model.FatalError != null)
{
    <span class="errortext">@Model.FatalError</span><br />
    return;
}

@if(Model.IsSaved)
{
	<span class="notetext">@Model.SuccessMessage</span><br />
}

@if(Model.HasErrors)
{
	<div class="errortext">
		@Model.ErrorText
	</div>		                                                  
}

@if(Model.IsPermissionDenied)
{
    return;
}

@{
    string liveIdFieldCode = Bitrix.Configuration.BXConfigurationUtility.Options.User.LiveIDCustomFieldCode;
    string openIdFieldCode = Bitrix.Configuration.BXConfigurationUtility.Options.User.OpenIDCustomFieldCode;
}
	
@foreach (var group in Model.FieldGroups)
{
	if (group.IsEmpty)
    {
        continue;
    }
    <div class="content-rounded-box" style="margin-bottom: 2em;" onkeypress="return FireDefaultButton(event, 'SaveButton')">
	<b class="r1"></b><b class="r0"></b>
	<div class="inner-box">
		<div class="content-form profile-form">
			<div class="legend">@group.Title</div>
				<div class="fields">
	                @foreach (var field in group.Fields)
	                {
		                string className = String.Concat("field", " field-", field.Id.ToLower());

		                if (field.Id.Equals(openIdFieldCode, StringComparison.OrdinalIgnoreCase))
		                {
			                className = "field field-openid";
			                var editor = (Bitrix.Main.Components.UserProfileEditComponent2.OpenIdEditor)field.Editor;
			                editor.ButtonClassName = "input-submit";
			                editor.FieldClassName = "input-openid";
		                }
		                else if (field.Id.Equals(liveIdFieldCode, StringComparison.OrdinalIgnoreCase))
		                {
			                className = "field field-liveid";
		                }
		                else
			                if (field.CustomType != null)
			                {
				                int position = field.CustomType.TypeName.LastIndexOf('.');
				                className = String.Concat(
					                className,
					                " field-",
					                position != -1 ? field.CustomType.TypeName.Substring(position + 1).ToLower() : field.CustomType.TypeName.ToLower());
			                }

		                if (field.ValidateErrors != null && field.ValidateErrors.Count > 0)
                        {
                            className += " field-error";
                        }
                        <div class="@className">	
                            <label class="field-title">
                                @if(field.IsRequired)
                                {
                                    <span style="color:red;">*</span>
                                }
                                @field.Title
                            </label>
			                <div class="form-input">@Html.Raw(field.Render())</div>
			
		                </div>
	                }
			    </div>
		    </div>
	    </div>
	    <b class="r0"></b><b class="r1"></b>
    </div>
}  	     		
<br />
<div class="content-form profile-form">
    <div class="button">
        <input id="SaveButton" name="SaveButton" type="submit" onclick="SaveUserDefaultHandler" value="@this.GetMessage("ButtonText.Save")" class="input-submit" />
    </div>
</div>


<script type="text/javascript">
	function OpenIdFireDefaultButton(event)
	{
	if (event.keyCode == 13) 
		{
        var src = event.srcElement || event.target;
        if (!src || (src.tagName.toLowerCase() != "textarea")) 
        {
            var defaultButton = src.nextSibling.nextSibling;
            if (defaultButton && typeof(defaultButton.click) != "undefined") 
            {
                defaultButton.click();
                event.cancelBubble = true;
                
                if (event.stopPropagation) 
                    event.stopPropagation();
                    
                return false;
            }
        }
    }
    return true;
	}
</script>
