@using Bitrix.UI
@using Bitrix.Components
@using Bitrix.Main.Components
@model SystemPasswordRecoveryAltCodeComponent2
           
@{
    Model.Context.Head.AddStyle(this.NormalizePath("style.css"));
}

@if (Model.Data.Succeeded)
{
    var control = new Bitrix.UI.BXMessage { CssClass = "ok", IconClass = "ok", Content = @Model.GetMessage("Message.PasswordHasBeenChanged") };
    @Html.RenderLiteControl(control)
    return;
}

@if (Model.FeatureEnabled)
{
    @Html.ValidationSummary(true, Model.GetMessage("Kernel.Error"))
    var data = Html.CreateHelper(Model.Data);
    using (Html.BeginSecureForm("Recovery"))
    {
        <div class="auth-form">
            <div class="header">@Model.GetMessage("Password Change")</div>

            <div class="picture"></div>
            <div class="table">
            <table cellpadding="0" cellspacing="0" border="0">
                <tr> 
                    <td class="label" valign="top">
                        <span style="color: red;">*</span>
                        @data.LabelFor(x => x.Login)
                    </td>
                    <td valign="top">
                        @data.EditorFor(x => x.Login)
                        @data.ValidationMessageFor(x => x.Login)
                    </td>
                </tr>
                <tr> 
                    <td class="label" valign="top">
                        <span style="color: red;">*</span>
                        @data.LabelFor(x => x.Checkword)
                    </td>
                    <td valign="top">
                        @data.EditorFor(x => x.Checkword)
                        @data.ValidationMessageFor(x => x.Checkword)
                    </td>
                </tr>
                <tr> 
                    <td class="label" valign="top">
                        <span style="color: red;">*</span>
                        @data.LabelFor(x => x.Password)
                    </td>
                    <td valign="top">
                        @data.EditorFor(x => x.Password)
                        @data.ValidationMessageFor(x => x.Password)
                    </td>
                </tr>
                <tr> 
                    <td class="label" valign="top">
                        <span style="color: red;">*</span>
                        @data.LabelFor(x => x.Confirmation)
                    </td>
                    <td valign="top">
                        @data.EditorFor(x => x.Confirmation)
                        @data.ValidationMessageFor(x => x.Confirmation)
                    </td>
                </tr>
                @if (Model.UseCaptcha)
                {
                    <tr>
                        <td align="right" valign="top">
                            <span style="color: red;">*</span>
                            @data.LabelFor(x => x.Captcha)
                        </td>
                        <td valign="top">
                            @data.HiddenFor(x => x.CaptchaGuid)              
                            @data.EditorFor(x => x.Captcha)
                            @data.ValidationMessageFor(x => x.Captcha)
                            <br />
                            <img alt="CAPTCHA" src="@Model.Data.CaptchaHref" />
                        </td>
                    </tr>
                }
                <tr> 
                    <td></td>
                    <td>
                        <button name="operation" type="submit">@Model.GetMessage("Button.ChangePassword")</button>
                    </td>
                </tr>
            </table>
            </div>
            <br clear="all"/>

            <div class="footer">
                <p>@Model.GetMessage("AllOfFieldsAreRequired")</p>
                <p>@Html.Raw(string.Format(Model.GetMessage("Format.Return2AuthorizationForm"), string.Format("<a href=\"{0}\">", Html.Encode(Model.LoginLink)), "</a>"))</p>
            </div>
        </div>
    }
}
else
{ 
    @Model.GetMessage("PasswordRecoveryIsUnavailableByMeansOfControlString")
}

