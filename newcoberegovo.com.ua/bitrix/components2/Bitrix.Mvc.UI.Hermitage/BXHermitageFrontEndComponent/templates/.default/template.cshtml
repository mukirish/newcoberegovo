@using Bitrix.Main
@using Bitrix.Services.Js
@using Bitrix.UI

@model Bitrix.Mvc.UI.Hermitage.BXHermitageFrontEndComponent

@{
	Model.Context.Head.RequireCore("admin", "window", "ajax", "net");
	Model.Context.Head.RequireAdminTools();
	Model.Context.Head.RequirePublicStyles();
}

<!--[if lte IE 6]>
	<style type="text/css">#bx-panel { display:none !important; }</style>
	<div id="bx-panel-error">
		@BXMain.GetModuleMessage("Hermitage.IE6Stub", false)
	</div>
<![endif]-->

<div style="display:none; overflow:hidden;" id="bx-panel-back"></div>
@{ var collapsed = Model.IsFolded?"bx-panel-folded":string.Empty;}
<div id="bx-panel" class="bx-unselectable @collapsed" unselectable="on">
	<div id="bx-panel-top">
		<div id="bx-panel-tabs">
			<a id="bx-panel-menu" href="#" onclick="jsStartMenu.ShowStartMenu(this); return false;" onmouseover="BX.hint(this, '@BXJSUtility.Encode(BXMain.GetModuleMessage("Hermitage.Menu", false))','@BXJSUtility.Encode(BXMain.GetModuleMessage("Hermitage.MenuHint", false))');">
				<span>@BXMain.GetModuleMessage("Hermitage.Menu", false)</span>
			</a>
			<a id="bx-panel-view-tab" href="@(Model.Context.CurrentUrl.AbsoluteUri)">
				<span>@BXMain.GetModuleMessage("Hermitage.Site", false)</span>
			</a>
			<a id="bx-panel-admin-tab" href="@(Model.PrepareAdminUrl())">
				<span>@BXMain.GetModuleMessage("Hermitage.Administration", false)</span>
			</a>
			@{ var msg = Bitrix.Activation.LicenseManager.SmallMessage(); }
			@if (!string.IsNullOrEmpty(msg))
			{
				<a href="@VirtualPathUtility.ToAbsolute("~/bitrix/admin/UpdateSystem.aspx")" id="bx-panel-license-error">
					<span id="bx-panel-license-error-text">@msg</span>
				</a>
			}
		</div>

		@if (Model.User != null)
  {
			<div id="bx-panel-userinfo">
				<a id="bx-panel-user" href="@string.Concat(VirtualPathUtility.ToAbsolute("~/bitrix/admin/AuthUsersEdit.aspx"), "?id=", Model.User.UserId.ToString())" onmouseover="BX.hint(this, '@BXJSUtility.Encode(BXMain.GetModuleMessage("Hermitage.UserProfileHint", false))')">
					@HttpUtility.HtmlEncode(Model.User.GetDisplayName()) ( @HttpUtility.HtmlEncode(Model.User.UserName) )
				</a>
				<span class="bx-panel-userinfo-separator"></span>
				<a id="bx-panel-logout" href="@(Model.LogoutUrl)" onmouseover="BX.hint(this, '@BXJSUtility.Encode(BXMain.GetModuleMessage("Hermitage.LogoutHint", false))')">
					@BXMain.GetModuleMessage("Hermitage.Logout", false)
				</a>
				<span class="bx-panel-userinfo-separator bx-panel-folded-mode-only"></span>
				@{ string toggle = Model.Toggle ? "on" : "off"; }
				
				<a id="bx-panel-small-toggle" href="@(Model.ToggleUrl)" class="bx-panel-toggle-@toggle" onmouseover="BX.hint(this, '@BXJSUtility.Encode(BXMain.GetModuleMessage("Hermitage.EditorMode", false))', '@BXJSUtility.Encode(BXMain.GetModuleMessage("Hermitage.EditorModeHint", false))')">
					<span id="bx-panel-small-toggle-caption">
						@BXMain.GetModuleMessage("Hermitage.EditorMode", false)
						<span id="bx-panel-small-toggle-icon">
							<span id="bx-panel-small-toggle-icon-overlay"></span>
						</span>
					</span>
				</a>
				<span class="bx-panel-userinfo-separator bx-panel-folded-mode-only"></span>
				<a href="#" id="bx-panel-expander" onmouseover="BX.hint(this, '@BXJSUtility.Encode(BXMain.GetModuleMessage("Hermitage.ExpandPanel", false))', '@BXJSUtility.Encode(BXMain.GetModuleMessage("Hermitage.ExpandPanelHint", false))')" onclick="return false;">
					<span id="bx-panel-expander-text">
						@BXMain.GetModuleMessage("Hermitage.ExpandPanel", false)
					</span>
					<span id="bx-panel-expander-arrow"></span>
				</a>
					<span class="bx-panel-userinfo-separator"></span>
				@{
					var isFixedClass = Model.IsFixed ? "class='bx-panel-pin-fixed'" : string.Empty;
				}
				<a href="#" id="bx-panel-pin" @isFixedClass onmouseover="BX.hint(this, '@BXJSUtility.Encode(BXMain.GetModuleMessage("Hermitage.FixPanelHint", false))')" onclick="return false;">
				</a>
			</div>
		}
	</div>
	<div id="bx-panel-site-toolbar">
		<div id="bx-panel-switcher">
			@{ var bxPanelToggleClass = Model.Toggle ? "bx-panel-toggle-on" : "bx-panel-toggle-off";}
			<a id="bx-panel-toggle" href="@(Model.ToggleUrl)" class="@bxPanelToggleClass"
			 onmouseover="BX.hint(this, '@BXJSUtility.Encode(BXMain.GetModuleMessage("Hermitage.EditorMode", false))', '@BXJSUtility.Encode(BXMain.GetModuleMessage("Hermitage.EditorModeHint", false))')">
				<span id="bx-panel-toggle-icon"><span id="bx-panel-toggle-icon-overlay"></span></span>
				<span class="bx-panel-break"></span>
				<span id="bx-panel-toggle-caption">
					@BXJSUtility.Encode(BXMain.GetModuleMessage("Hermitage.EditorMode", false))
				</span>
				<span class="bx-panel-break"></span><span id="bx-panel-toggle-caption-mode">
					@if(!Model.Toggle)
					{
						@BXMain.GetModuleMessage("Hermitage.EditorModeState.On")
					}
					else
					{
						@BXMain.GetModuleMessage("Hermitage.EditorModeState.Off")
					}
				</span>
			</a>
			<a href="#" id="bx-panel-hider" onclick="var panelDiv=document.getElementById('bx-panel'); if(panelDiv.className.indexOf('bx-panel-folded') > -1) { panelDiv.className=panelDiv.className.replace(/\s*bx-panel-folded/ig, '');} else {panelDiv.className +=' bx-panel-folded'; } return false;"
				onmouseover="BX.hint(this, '@BXJSUtility.Encode(BXMain.GetModuleMessage("Hermitage.CollapsePanel", false))', '@BXJSUtility.Encode(BXMain.GetModuleMessage("Hermitage.CollapsePanelHint", false))')">
				@BXMain.GetModuleMessage("Hermitage.CollapsePanel", false)
				<span id="bx-panel-hider-arrow"></span>
			</a>
		</div>
		<div id="bx-panel-buttons">
			<div id="bx-panel-buttons-inner">
				@{ int secCount = 0; }
				@foreach (Bitrix.UI.Hermitage.BXHermitagePublicPanelSectionInfo sec in Model.Info.Sections)
				{
					if (!sec.HasMenus())
					{
						continue;
					}

					if (secCount > 0)
					{
						<span class="bx-panel-button-separator"></span>
					}

					/*
					 * Определено 2 типа раскладки:
					 * горизонтальная для секции из больших кнопок,
					 * вертикальная для секции из маленьких кнопок.
					 * Смешивание больших и маленьких кнопок в одной секции не допускается.
					 * При обнаружении смешения секция разбивается на отдельные секции
					 */
					foreach (Bitrix.UI.Hermitage.BXHermitagePublicPanelSectionInfo workSecInfo in sec.SplitByLayout())
					{
						workSecInfo.SortMenus();
						Bitrix.UI.Hermitage.BXHermitagePublicPanelSectionLayout layout = workSecInfo.GetLayout();
						<span class="bx-panel-button-group">
						@for (int i = 0; i < workSecInfo.Menus.Count; i++)
						{
							Bitrix.UI.Hermitage.BXHermitagePublicPanelMenuInfo menuInfo = workSecInfo.Menus[i];
							if (i > 0 && layout == Bitrix.UI.Hermitage.BXHermitagePublicPanelSectionLayout.Vertical)
							{
								<span class="bx-panel-break"></span>
							}

							string imgBtnScript = menuInfo.ClientClickScript;
							if (imgBtnScript.Length == 0)
							{
								Bitrix.UI.Hermitage.BXHermitagePopupMenuItem item = menuInfo.GetPopupDefaultItem();
								imgBtnScript = item != null ? item.ClientClickScript.Trim() : string.Empty;
							}

							if (menuInfo.Size == Bitrix.UI.Hermitage.BXHermitagePublicPanelMenuSize.Large)
							{
								<span class="bx-panel-button">
								<span class="bx-panel-button-inner">
								@{
									string imgButtonId = Model.GetImageButtonClientID(menuInfo.Id);
									Model.RequirePreventDefaultElIdList.Add(imgButtonId);
								}
								<a id="@(imgButtonId)" href="#" onclick="@(!string.IsNullOrEmpty(imgBtnScript) ? (imgBtnScript.EndsWith(";", StringComparison.Ordinal) ? imgBtnScript : (imgBtnScript + ";")) : string.Empty)">
								<span class="bx-panel-button-icon @menuInfo.IconCssClass"></span></a>
								
								@{
									string arrowButtonId = Model.GetArrowButtonClientID(menuInfo.Id);
									Model.RequirePreventDefaultElIdList.Add(arrowButtonId);
								}
								<a id="@(arrowButtonId)" href="#">
									<span class="bx-panel-button-text">@Html.Raw(Model.ReplaceString(menuInfo.Caption, "#BR#", @"<span class=""bx-panel-break""></span>"))</span>
									&nbsp;<span class="bx-panel-button-arrow"></span>
								</a>
								</span></span>
							}
							else if (menuInfo.Size == Bitrix.UI.Hermitage.BXHermitagePublicPanelMenuSize.Small)
							{
								<span class="bx-panel-small-button">
									<span class="bx-panel-small-button-inner">
								@{
									string imgButtonId = Model.GetImageButtonClientID(menuInfo.Id);
									Model.RequirePreventDefaultElIdList.Add(imgButtonId);
								}
								<a id="@(imgButtonId)" href="#" onclick="@Html.Raw(!string.IsNullOrEmpty(imgBtnScript) ? (imgBtnScript.EndsWith(";", StringComparison.Ordinal) ? imgBtnScript : (imgBtnScript + ";")) : string.Empty)">
									<span class="bx-panel-small-button-icon 
										@if (!string.IsNullOrEmpty(menuInfo.IconCssClass))
										{
											@: @menuInfo.IconCssClass
										}
										"></span>
										<span class="bx-panel-small-button-text">@Html.Raw(Model.ReplaceString(menuInfo.Caption, "#BR#", @"<span class=""bx-panel-break""></span>"))</span>

										@if (imgBtnScript.Length == 0)
										{
											<span class="bx-panel-small-single-button-arrow"></span>
										}
								</a>

								@if (imgBtnScript.Length > 0)
								{
									string arrowButtonId = Model.GetArrowButtonClientID(menuInfo.Id);
									Model.RequirePreventDefaultElIdList.Add(arrowButtonId);
									<a id="@(arrowButtonId))" class="bx-panel-small-button-arrow" href="#">
									@if (menuInfo.Popup.ItemCount > 0)
									{
										<span class="bx-panel-small-button-arrow"></span>
									}
									</a>
								}
								</span>
								</span>
							}

						}
						</span>
					}

					secCount++;
				}
				@Html.Raw(Model.RenderInitializationScripts())
			</div>
		</div>
	</div>
</div>
