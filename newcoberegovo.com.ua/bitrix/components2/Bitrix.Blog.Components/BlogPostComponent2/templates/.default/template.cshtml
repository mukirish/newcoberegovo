@using System.Text
@using Bitrix.Blog
@using Bitrix.Components
@using Bitrix.Blog.Components
@model BlogPostComponent2

@if (Model.HasErrors)
{
    <div class="blog-content">
        <div class="blog-note-box blog-note-error">
            <div class="blog-note-box-text">@Html.Raw(Model.ErrorText)</div>
        </div>
    </div>
    return;
}

@{
    var postClasses = new StringBuilder();
    if ((Model.Post.Post.Flags & BXBlogPostFlags.FromSyndication) != BXBlogPostFlags.None)
    {
        postClasses.Append(" blog-post-from-syndication");
    }

    var date = Model.Post.Post.DatePublished;
    if (!Model.Post.Post.IsPublished || date > DateTime.Now)
    {
        postClasses.Append(" blog-post-draft");
    }
    
    postClasses.Append(" blog-post-year-");
    postClasses.Append(date.Year);
    postClasses.Append(" blog-post-month-");
    postClasses.Append(date.Month);
    postClasses.Append(" blog-post-day-");
    postClasses.Append(date.Day);
}

<div class="blog-content">
<div class="blog-post blog-post-detail<%= postClasses %>">
    <h2 class="blog-post-title"><span>@Model.Post.TitleHtml</span></h2>
    <div class="blog-post-info-back blog-post-info-top">
        <div class="blog-post-info">
            <div class="blog-author">
                <a class="blog-author-icon" href="@Model.Post.UserProfileHref"></a><a href="@Model.Post.BlogHref">@Model.Post.AuthorNameHtml</a></div>
            <div class="blog-post-date" title="@Model.Post.Post.DatePublished.ToString("g")">
                <span class="blog-post-day">@Model.Post.Post.DatePublished.ToString("d")</span> <span class="blog-post-time">@Model.Post.Post.DatePublished.ToString("t")</span>
            </div>
        </div>
    </div>
    <div class="blog-post-content">
        @{
            if (Model.Post.Post.Author != null && Model.Post.Post.Author.User != null && Model.Post.Post.Author.User.Image != null)
            {
                <div class="blog-post-avatar"><img alt="" width="@(Model.Post.Post.Author.User.Image.Width)px" height="@(Model.Post.Post.Author.User.Image.Height)px" src="@Model.Post.Post.Author.User.Image.FilePath" /></div>	
            }
        
            int i = 1;
            Model.RenderBeginCut += delegate(object sender, BXBlogCutTagEventArgs e)
            {
                e.Writer.Write(@"<a class=""blog-cut-anchor"" name=""cut");
                e.Writer.Write(i++);
                e.Writer.WriteLine(@"""></a>");
            };           
        }

        @Html.Raw(Model.Post.GetPostContent())
        <div class="blog-clear-float"></div>
    </div>
    
    <div class="blog-post-meta">
        <div class="blog-post-info-back blog-post-info-bottom">
            <div class="blog-post-info">
                <div class="blog-author">
                    <a class="blog-author-icon" href="@Model.Post.UserProfileHref"></a><a href="@Model.Post.BlogHref">@Model.Post.AuthorNameHtml</a></div>
                <div class="blog-post-date" title="@Model.Post.Post.DatePublished.ToString("g")">
                    <span class="blog-post-day">@Model.Post.Post.DatePublished.ToString("d")</span> <span class="blog-post-time">@Model.Post.Post.DatePublished.ToString("t")</span>
                </div>
            </div>
        </div>

        <div class="blog-post-meta-util">
            @if (Model.Post.Post.EnableComments)
            {
                <span class="blog-post-comments-link"><a href="@(Model.Post.PostViewHref)#comments" title="@Model.GetMessage("Comments")"><span class="blog-post-link-caption">@Model.GetMessage("Comments"):</span><span class="blog-post-link-counter">@Model.Post.Post.CommentCount</span></a></span>
                <span class="blog-post-rss-link"><a href="@Model.Post.RssHref" title="@Model.GetMessage("CommentsRss")">RSS</a></span>
            }
            <span class="blog-post-views-link"><a href="@Model.Post.PostViewHref" title="@Model.GetMessage("Views")"><span class="blog-post-link-caption">@Model.GetMessage("Views"):</span><span class="blog-post-link-counter">@Model.Post.Post.ViewCount</span></a></span>
            @if (Model.Auth.CanEditThisPost)
            {
                <span class="blog-post-edit-link"><a href="@Model.Post.PostEditHref" rel="nofollow" title="@Model.GetMessage("Kernel.Edit")"><span class="blog-post-link-caption">@Model.GetMessage("Kernel.Edit")</span></a></span>
            }
            
            @if (Model.Auth.CanDeleteThisPost)
            {
                <span class="blog-post-delete-link"><a href="@Url.SecureAction("DeletePost", Model)" onclick="return confirm('@BXComponent2.JSEncode(Model.GetMessage("Confirm.Delete"))');" rel="nofollow" title="@Model.GetMessage("Kernel.Delete")"><span class="blog-post-link-caption">@Model.GetMessage("Kernel.Delete")</span></a></span>
            }
        </div>
        
        @if (Model.Post.Tags.Count != 0)
        {
            bool first = true;
            <div class="blog-post-tag">
                <span>@Model.GetMessage("Tags"): </span> 
                @foreach (var tag in Model.Post.Tags) 
                { 
                    if (!first)
                    {
                        @Html.Raw(", ")
                    }
                    else
                    {
                        first = false;
                    }

                    if (!string.IsNullOrEmpty(tag.TagHref))
                    {
                        <a href="@tag.TagHref">@tag.TagHtml</a>
                    }
                    else
                    {
                        @tag.TagHtml
                    }
                }
            </div>
        }
        
        @if (Model.EnableVotingForPost)
  {
            <div class="blog-post-voting">
                @*
                <bx:IncludeComponent 
                    id="voting" 
                    runat="server" 
                    componentname="bitrix:rating.vote" 
                    Template=".default" 
                    BoundEntityTypeId="BlogPost" 
                    BoundEntityId="<%$ Component:PostId %>" 
                    CustomPropertyEntityId = "BlogPost"
                    RolesAuthorizedToVote="<%$ Component:RolesAuthorizedToVote %>"
                    BannedUsers = "<%$ Component:UsersBannedToVote %>" />
                *@
            </div>
        }
    </div>
</div>
</div>
