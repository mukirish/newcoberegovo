@using System.Text
@using Bitrix.Blog
@using Bitrix.Blog.Components
@using Bitrix.Components
@model BlogPostListComponent2

@if (Model.HasErrors)
{
    <div class="blog-content">
        <div class="blog-note-box blog-note-error">
            <div class="blog-note-box-text">@Html.Raw(Model.ErrorText)</div>
        </div>
    </div>
    return;
}

@if (Model.Posts.Count < 1)
{
    <div class="blog-content">
        @(Model.IsFilterSet ? Model.GetMessage("PostsNotFoundByFilter") : Model.PublishMode == BlogPublishMode.Draft ? Model.GetMessage("DraftsNotFound") : Model.GetMessage("PostsNotFound"))
    </div>
    return;
}

<div class="blog-content">
    <div class="blog-posts blog-post-list">
        <div id="blog-posts-content">
            @if (Model.Paging.IsTopPosition)
            {
                <div class="blog-navigation-box blog-navigation-top">
                    <div class="blog-page-navigation">@Html.RenderComponent("topPager")</div>
                </div>
            }
            @{
                BlogPostListComponent2.PostInfo post = null;
                int cutNum = 0;
                Model.RenderHideCut += delegate(object sender, BXBlogCutTagEventArgs e)
                {
                    cutNum++;
                    var title = !Bitrix.Services.Text.BXStringUtility.IsNullOrTrimEmpty(e.Option) ? e.Option.Trim() : Model.GetMessage("CutDefaultTitle");
                    e.Writer.Write(String.Concat(@"<a class=""blog-cut-link"" href=""", post.PostViewHref, "#cut", cutNum, @""">", Html.Encode(title), "</a>"));
                };
                               
                var postClasses = new StringBuilder();
                for (int i = 0; i < Model.Posts.Count; i++)
                {
                    cutNum = 0;
                    post = Model.Posts[i];
                    
                    postClasses.Length = 0;
                    if (i % 2 == 1)
                    {
                        postClasses.Append(" blog-post-alt");
                    }
                    
                    if ((post.Post.Flags & BXBlogPostFlags.FromSyndication) != BXBlogPostFlags.None)
                    {
                        postClasses.Append(" blog-post-from-syndication");
                    }
                    
                    var date = post.Post.DatePublished;
                    if (!post.Post.IsPublished || date > DateTime.Now)
                    {
                        postClasses.Append(" blog-post-draft");
                    }
                    
                    postClasses.Append(" blog-post-year-");
                    postClasses.Append(date.Year);
                    postClasses.Append(" blog-post-month-");
                    postClasses.Append(date.Month);
                    postClasses.Append(" blog-post-day-");
                    postClasses.Append(date.Day);
                    if (i == 0)
                    {
                        postClasses.Append(" blog-post-first");
                    }
                    
                    if (i == Model.Posts.Count - 1)
                    {
                        postClasses.Append(" blog-post-last");
                    }
                            
                    <div class="blog-post@(postClasses)">
                        <h2 class="blog-post-title"><a href="@post.PostViewHref" title="@post.Post.Title">@post.TitleHtml</a></h2>
                        <div class="blog-post-info-back blog-post-info-top">
                            <div class="blog-post-info">
                                <div class="blog-author">
                                    <a class="blog-author-icon" href="@post.UserProfileHref"></a>
                                    <a class="" href="@post.BlogHref">@post.AuthorNameHtml</a>
                                </div>
                                <div class="blog-post-date" title="@post.Post.DatePublished.ToString("g")">
                                    <span class="blog-post-day">@post.Post.DatePublished.ToString("d")</span> <span class="blog-post-time">@post.Post.DatePublished.ToString("t")</span>
                                </div>
                                @if (Model.SortByVotingTotals)
                                {
                                    <div style="display:inline; line-height:1.4em; margin:0.1em 0; padding:0 0 0 0.3em;">Voting total: @post.VotingTotalValue.ToString("N0")</div>
                                }
                            </div>
                        </div>
                        <div class="blog-post-content">
                            @if (post.Post.Author != null && post.Post.Author.User != null && post.Post.Author.User.Image != null)
                            {
                                <div class="blog-post-avatar"><img alt="" width="@post.Post.Author.User.Image.Width" height="@post.Post.Author.User.Image.Height" src="@post.Post.Author.User.Image.FilePath" /></div>
                            }
                            @Html.Raw(post.GetContentHtml())
                            <div class="blog-clear-float"></div>
                        </div>
                        <div class="blog-post-meta">
                            <div class="blog-post-info-back blog-post-info-bottom">
                                <div class="blog-post-info">
                                    <div class="blog-author">
                                        <a class="blog-author-icon" href="@post.UserProfileHref"></a>
                                        <a class="" href="@post.BlogHref">@post.AuthorNameHtml</a>
                                    </div>
                                    <div class="blog-post-date" title="@post.Post.DatePublished.ToString("g")">
                                        <span class="blog-post-day">@post.Post.DatePublished.ToString("d")</span> <span class="blog-post-time">@post.Post.DatePublished.ToString("t")</span>
                                    </div>
                                </div>
                            </div>
                            <div class="blog-post-meta-util">
                                @if (post.Post.EnableComments)
                                {
                                    <span class="blog-post-comments-link"><a href="@(post.PostViewHref)#comments" title="@Model.GetMessage("CommentsLinkTitle")"><span class="blog-post-link-caption">@Model.GetMessage("CommentsLinkTitle"):</span><span class="blog-post-link-counter">@post.Post.CommentCount</span></a></span>
                                }
                                <span class="blog-post-views-link"><a href="@post.PostViewHref" title="@Model.GetMessage("ViewsLinkTitle")"><span class="blog-post-link-caption">@Model.GetMessage("ViewsLinkTitle"):</span><span class="blog-post-link-counter">@post.Post.ViewCount</span></a></span>
                                @if (!string.IsNullOrEmpty(post.PostEditHref))
                                {
                                    <span class="blog-post-edit-link"><a href="@post.PostEditHref" title="@Model.GetMessage("EditLinkTitle")"><span class="blog-post-link-caption">@Model.GetMessage("EditLinkTitle")</span></a></span>
                                }
                                
                                @if (post.Auth.CanDeleteThisPost)
                                {
                                    <span class="blog-post-delete-link"><a href="@Url.SecureAction("DeletePost", Model, new { id = post.Post.Id })" onclick="return confirm('@BXComponent2.JSEncode(Model.GetMessage("DeleteConfirmMessage"))')" rel="nofollow" title="@Model.GetMessage("DeleteLinkTitle")"><span class="blog-post-link-caption">@Model.GetMessage("DeleteLinkTitle")</span></a></span>
                                }
                            </div>
                    
                            @if (post.Tags.Count != 0)
                            {
                                    bool first = true;
                                    <div class="blog-post-tag"><span>@Model.GetMessage("Tags"): </span>
                                    @foreach(var tag in post.Tags) 
                                    { 
                                        if (!first)
                                        {
                                            @Html.Raw(", ")
                                        } 
                                        else
                                        {
                                            first = false;
                                        }

                                        if (!string.IsNullOrEmpty(tag.TagHref))
                                        {
                                            <a href="@tag.TagHref">@tag.TagHtml</a>
                                        }
                                        else
                                        {
                                            @tag.TagHtml;
                                        } 
                                    } 
                                </div>
                            }
                    
                            @if (Model.EnableVotingForPost)
                            {
                                <div id="@(Model.Context.BaseId + "_PostVoting" + post.Post.Id)" class="blog-post-voting"></div>	
                            }
                        </div>
                    </div>
                }
            }
            
            @if (Model.Paging.IsBottomPosition)
            {
                <div class="blog-navigation-box blog-navigation-bottom">
                    <div class="blog-page-navigation">@Html.RenderComponent("bottomPager")</div>
                </div>
            }   
        </div>
    </div>
    <div class="blog-clear-float"></div>
</div>
